version: "3.8"

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: ptsmart-crm-db-prod
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./docker/mysql/production:/docker-entrypoint-initdb.d
    networks:
      - ptsmart-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Laravel Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_ENV=production
    container_name: ptsmart-crm-backend-prod
    restart: always
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis
    volumes:
      - app_storage:/var/www/html/storage
      - app_cache:/var/www/html/bootstrap/cache
    depends_on:
      - db
      - redis
    networks:
      - ptsmart-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
    container_name: ptsmart-crm-frontend-prod
    restart: always
    depends_on:
      - backend
    networks:
      - ptsmart-prod-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Redis
  redis:
    image: redis:7-alpine
    container_name: ptsmart-crm-redis-prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - ptsmart-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: ptsmart-crm-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/production.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    depends_on:
      - backend
      - frontend
    networks:
      - ptsmart-prod-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: ptsmart-crm-certbot
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    depends_on:
      - nginx
    networks:
      - ptsmart-prod-network

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ptsmart-crm-queue-prod
    restart: always
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis
    volumes:
      - app_storage:/var/www/html/storage
    depends_on:
      - db
      - redis
    command: php artisan queue:work --sleep=3 --tries=3 --timeout=90
    networks:
      - ptsmart-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ptsmart-crm-scheduler-prod
    restart: always
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis
    volumes:
      - app_storage:/var/www/html/storage
    depends_on:
      - db
      - redis
    command: >
      sh -c "while true; do
        php artisan schedule:run --verbose --no-interaction &
        sleep 60
      done"
    networks:
      - ptsmart-prod-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  mysql_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  app_storage:
    driver: local
  app_cache:
    driver: local
  certbot_www:
    driver: local
  certbot_conf:
    driver: local

networks:
  ptsmart-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
